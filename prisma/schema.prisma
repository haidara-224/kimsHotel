
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  CLIENT
  HOTELIER
  ADMIN
  SUPER_ADMIN
}

enum TypeChambre {
  SIMPLE
  DOUBLE
  SUITE
}

enum StatutReservations {
  PENDING
  CONFIRMED
  CANCELLED
}
model Role {
  id                  String                @id @default(uuid())
  name                Roles                 @unique
  users               UserRole[]            @relation("RoleUsers")
  UserRoleAppartement UserRoleAppartement[] @relation("RoleUsersLogement")
  UserRoleHotel       UserRoleHotel[]       @relation("RoleUsersHotel")
}

model User {
  id                  String                @id @unique
 
  name          String
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]
  email               String                @unique
  profileImage        String?

  roles               UserRole[]            @relation("UserRoles")
  logements           Logement[]            @relation("UserLogements")
  favorites           Favorite[]            @relation("UserFavorites")
  avis                Avis[]                @relation("UserAvis")
  reservations        Reservation[]         @relation("UserReservations")
  commentUser         CommentaireLogement[] @relation("UserComment")
  hotels              Hotel[]               @relation("UserHotels")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  CommentaireHotel    CommentaireHotel[]    @relation("UserCommentHotel")
  UserRoleAppartement UserRoleAppartement[] @relation("UserLogement")
  UserRoleHotel       UserRoleHotel[]       @relation("UserHotel")

 

  @@index([email])
  @@map("user")
}

model UserRole {
  userId String
  roleId String

  user User @relation("UserRoles", fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation("RoleUsers", fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model CategoryLogement {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?    @db.VarChar(1000)
  urlImage    String
  logements   Logement[] @relation("CategoryToLogement")
  hotels      Hotel[]    @relation("CategoryToHotel")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Option {
  id          String                     @id @default(uuid())
  name        String
  title       String
  description String                     @db.VarChar(1000)
  imageUrl    String
  logements   LogementOptionOnLogement[] @relation("LogementToOption")
  hotels      HotelOptionOnHotel[]       @relation("HotelToOption")
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt
}

model ImageHotel {
  id        String   @id @default(uuid())
  hotel     Hotel    @relation("HotelImages", fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId   String
  urlImage  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hotel {
  id                 String               @id @default(uuid())
  user               User                 @relation("UserHotels", fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  hotelOptions       HotelOptionOnHotel[] @relation("OptionOnHotel")
  categoryLogement   CategoryLogement     @relation("CategoryToHotel", fields: [categoryLogementId], references: [id], onDelete: Cascade)
  chambres           Chambre[]            @relation("HotelChambres")
  categoryLogementId String
  nom                String               @unique
  description        String?              @db.VarChar(1000)
  adresse            String?
  ville              String?
  telephone          String?
  email              String?
  parking            Boolean              @default(false)
  latitude           Float?
  longitude          Float?
  note               Float?
  isBlocked          Boolean              @default(false)
  favorites          Favorite[]           @relation("HotelFavorites")
  avis               Avis[]               @relation("HotelAvis")
  etoils             Int?
  images             ImageHotel[]         @relation("HotelImages")

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  CommentaireHotel CommentaireHotel[] @relation("HotelComment")
  UserRoleHotel    UserRoleHotel[]    @relation("UserRoleHotel")

  @@index([nom])
}

model Logement {
  id                 String                     @id @default(uuid())
  user               User                       @relation("UserLogements", fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  logementOptions    LogementOptionOnLogement[] @relation("LogementToOptionOnLogement")
  categoryLogement   CategoryLogement           @relation("CategoryToLogement", fields: [categoryLogementId], references: [id], onDelete: Cascade)
  categoryLogementId String
  nom                String                     @unique
  description        String?                    @db.VarChar(1000)
  adresse            String?
  ville              String?
  telephone          String?
  email              String?
  capacity           Int                        @default(1)
  disponible         Boolean                    @default(true)
  hasWifi            Boolean                    @default(false)
  hasTV              Boolean                    @default(false)
  hasClim            Boolean                    @default(false)
  hasKitchen         Boolean                    @default(false)
  parking            Boolean                    @default(false)
  surface            Int?
  extraBed           Boolean                    @default(false)
  latitude           Float?
  longitude          Float?
  note               Float?
  isBlocked          Boolean                    @default(false)
  favorites          Favorite[]                 @relation("LogementFavorites")
  avis               Avis[]                     @relation("LogementAvis")
  reservations       Reservation[]              @relation("LogementReservations")
  images             ImageLogement[]            @relation("LogementImages")
  commentLogement    CommentaireLogement[]      @relation("LogementComment")
  nbChambres         Int
  price              Int
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt

  UserRoleAppartement UserRoleAppartement[] @relation("UserRoleLogement")
}

model LogementOptionOnLogement {
  logementId String
  optionId   String
  logement   Logement @relation("LogementToOptionOnLogement", fields: [logementId], references: [id], onDelete: Cascade)
  option     Option   @relation("LogementToOption", fields: [optionId], references: [id], onDelete: Cascade)

  @@id([logementId, optionId])
}

model HotelOptionOnHotel {
  hotelId    String
  optionId   String
  logementId String?
  hotel      Hotel   @relation("OptionOnHotel", fields: [hotelId], references: [id], onDelete: Cascade)
  option     Option  @relation("HotelToOption", fields: [optionId], references: [id], onDelete: Cascade)

  @@id([hotelId, optionId])
}

model Chambre {
  id             String         @id @default(uuid())
  numero_chambre String?        @unique
  hotel          Hotel          @relation("HotelChambres", fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId        String
  description    String?        @db.VarChar(1000)
  type           TypeChambre
  price          Int
  capacity       Int            @default(1)
  disponible     Boolean        @default(true)
  hasWifi        Boolean        @default(false)
  hasTV          Boolean        @default(false)
  hasClim        Boolean        @default(false)
  hasKitchen     Boolean        @default(false)
  surface        Int?
  extraBed       Boolean        @default(false)
  images         ImageChambre[] @relation("ChambreImages")
  reservations   Reservation[]  @relation("ChambreReservations")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Favorite {
  id         String    @id @default(uuid())
  user       User?     @relation("UserFavorites", fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
  logement   Logement? @relation("LogementFavorites", fields: [logementId], references: [id], onDelete: Cascade)
  logementId String?
  hotel      Hotel?    @relation("HotelFavorites", fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Reservation {
  id         String             @id @default(uuid())
  startDate  DateTime
  endDate    DateTime
  status     StatutReservations @default(PENDING)
  user       User?              @relation("UserReservations", fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
  logement   Logement?          @relation("LogementReservations", fields: [logementId], references: [id], onDelete: Cascade)
  logementId String?
  paiement   Paiement?
  chambre    Chambre?           @relation("ChambreReservations", fields: [chambreId], references: [id], onDelete: Cascade)
  chambreId  String?
  nbpersonne String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model Avis {
  id         String    @id @default(uuid())
  start      Int
  user       User?     @relation("UserAvis", fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
  logement   Logement? @relation("LogementAvis", fields: [logementId], references: [id], onDelete: Cascade)
  logementId String?
  hotel      Hotel?    @relation("HotelAvis", fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model CommentaireLogement {
  id         String    @id @default(uuid())
  comment    String    @db.VarChar(1000)
  logement   Logement? @relation("LogementComment", fields: [logementId], references: [id], onDelete: Cascade)
  logementId String?
  user       User?     @relation("UserComment", fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model CommentaireHotel {
  id        String   @id @default(uuid())
  comment   String   @db.VarChar(1000)
  hotel     Hotel?   @relation("HotelComment", fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId   String?
  user      User?    @relation("UserCommentHotel", fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ImageLogement {
  id         String   @id @default(uuid())
  logement   Logement @relation("LogementImages", fields: [logementId], references: [id], onDelete: Cascade)
  logementId String
  urlImage   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ImageChambre {
  id        String   @id @default(uuid())
  chambre   Chambre  @relation("ChambreImages", fields: [chambreId], references: [id], onDelete: Cascade)
  chambreId String
  urlImage  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Paiement {
  id            String          @id @default(uuid())
  reservation   Reservation     @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  reservationId String          @unique
  montant       Float
  //paycard_operation_reference String? @unique
  transaction_reference   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model UserRoleAppartement {
  id         String   @id @default(uuid())
  logement   Logement @relation("UserRoleLogement", fields: [logementId], references: [id], onDelete: Cascade)
  logementId String
  roleId     String
  role       Role     @relation("RoleUsersLogement", fields: [roleId], references: [id], onDelete: Cascade)
  userId     String
  active     Boolean  @default(true)
  user       User     @relation("UserLogement", fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, logementId])
}

model UserRoleHotel {
  id        String   @id @default(uuid())
  hotel     Hotel    @relation("UserRoleHotel", fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId   String
  roleId    String
  role      Role     @relation("RoleUsersHotel", fields: [roleId], references: [id], onDelete: Cascade)
  userId    String
  active    Boolean  @default(true)
  user      User     @relation("UserHotel", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, hotelId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
